#!/bin/bash

aurhelper=yay

# declare -A packages
packages=(
    # xorg
    xorg-server # graphical server
    xorg-xinit # allows to manually start the xserver

    # bspwm
    bspwm
    sxhkdrc

    # git
    github-cli

    unclutter

    libnotify

    # audio
    pulseaudio
    pulseaudio-alsa
    pulseaudio-bluetooth
    pulsemixer
    pamixer
    alsa-utils # includes alsamixer
    pavucontrol

    # bluetooth
    bluez
    bluez-utils
    blueman # bluetooth gui

    dunst
    gnome-keyring
    acpid

    # network
    networkmanager
    nm-connection-editor
    network-manager-applet

    # lightdm
    lightdm
    lightdm-webkit2-greeter
    lightdm-webkit-theme-litarvan
    lightdm-webkit2-theme-glorious
    betterlockscreen
    
    # polybar
    polybar

    # themes
    papirus-icon-theme
    adpata-gtk-theme
    mcmojave-cursors=A
    lxappearance
    kvantum-qt5

    # fonts
    noto-fonts
    ttf-roboto
    nerd-fonts-fira-code=A

    # pacman
    pkgstats # send pacakge info to arch linux

    # terminal utilities
    trash-cli
    lf
    neofetch
    fzf
    fd # find, needed for fzf
    bat # cat, needed for fzf
    exa # ls
    ripgrep # better grep, needed for fzf
    broot
    bottom=A
    zoxide=A
    googler=A
    buku=A

    cronie # cron jobs

    # neovim
    neovim
    neovim-remote=A
    python-pynvim

    # other editor
    micro=A

    # clipboard stuff
    xclip # clipboard integration for neovim
    xsel # needed for cht.sh

    # dual keyboard mappings
    xcape

    # language package managers
    python-pip

    # shell stuff
    zsh
    tmux
    kitty
    # zsh prompt
    starship-bin=A

    # mount and unmount mangement
    udiskie

    # viewers
    feh # background setter
    sxiv # image
    zathura # pdf
    zathura-pdf-mupdf
    mpv # video

    # important for multimonitor
    autorandr
    arandr

    # gui stuff
    brave-bin=A
    nautilus
    flameshot
    peek # gifs
    gnome-sound-recorder # sound recording
    xfce4-power-manager # power management gui
    xob=A
    dragon-drag-and-drop=A
    syncthing
    syncthing-gtk

    # rofi stuff
    rofi
    buku_run=A

    # haskell
    ghc
    stack

    # rust
    rustup
    stable=RT
    beta=RT
    nightly=RT

    # cargo subcommands
    cargo-watch
    cargo-edit
    cargo-audit
    cargo-outdated
    cross=A # cross compile packages
    cargo-aur-bin=A

    # langague servers
    lua-language-server-git=A
    microsoft-python-language-server=A
    typescript-language-server-bin=A
    vscode-json-languageserver-bin=A
    yaml-language-server-bin=A
    gopls=A
    haskell-language-server-bin=A
    texlab
    rust-analyzer
    bash-language-server
)
total=${#packages[@]}

services=(
    networkmanager
    bluetooth
    lightdm
    "betterlockscreen@$name"
)

installpkg() {
    pacman --noconfirm --needed -S "$1" >/dev/null 2>&1
}

enableservice() {
    echo "Enabling the $1 service"
    systemctl enable "$1"
}

welcomemsg() {
    whiptail \
        --title "Welcome!" \
        --msgbox "Welcome to Brian's Auto-Rice Bootstrapping Script!

This script will automatically install a fully-featured Linux desktop.
-Brian"
}

error() { clear; printf "ERROR:\\n%s\\n" "$1"; exit;}

manualinstall() { # Installs $1 manually if not installed. Used only for AUR helper here.
    [ -f "/usr/bin/$1" ] || (
    cd /tmp || exit
    rm -rf /tmp/"$1"*
    curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$1".tar.gz &&
    sudo -u "$name" tar -xvf "$1".tar.gz >/dev/null 2>&1 &&
    cd "$1" &&
    sudo -u "$name" makepkg --noconfirm -si >/dev/null 2>&1
    cd /tmp || return) ;}

aurinstall() {
    echo "Installing $1 ($n of $total)"
    echo "$aurinstalled" | grep -q "^$1$" && return
    sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1
}

rustinstall() {
    command -v rustup || installpkg rustup >/dev/null 2>&1
    echo "Installing $1 rust toolchain with rustup ($n of $total)"
    rustup toolchain install "$1"
}

pipinstall() { \
    command -v pip || installpkg python-pip >/dev/null 2>&1
    echo "Installing $1 ($n of $total)"
    yes | pip install "$1"
}

installneeded() {
    for package in curl base-devel git zsh; do
        echo "Installing $package which is required for this script to work"
        installpkg "$package"
    done
}

maininstall() {
    echo "Install $1 ($n of total)"
    installpkg "$1"
}

installationloop() {
    aurinstalled=$(pacman -Qqm)
    local regex="([^=]+)(=([^=]+))?"
    for package in "${!packages[@]}"; do
        n=$((n+1))
        if [[ $package =~ $regex ]]; then
            local program=${BASH_REMATCH[1]}
            local type=${BASH_REMATCH[3]}

            case "$type" in
                "A") aurinstall "$program";;
                "P") pipinstall "$program";;
                "RT") rustinstall "$program";;
                *) installpkg "$program";;
            esac
        else
            error "the package doesn't match"
        fi
    done
}

serviceloop() {
    for service in "${!services[@]}"; do
        enableservice "$service"
    done
}

setshell() {
    chsh -s /bin/zsh "$name" >/dev/null 2>&1
}

finalize() {
    whiptail --title "Finished!" \
        --msgbox "The installation has finished"
}

main() {
    installpkg libnewt || error "Are you sure you're running this as the root user, are on an Arch-based distribution and have an internet connection?"
    installneeded
    welcomemsg || error "User exited."
    manualinstall $aurhelper || error "Failed to install AUR helper."
    installationloop
    finalize
    clear
}

# sudo pacman -R gnu-free-fonts
