#!/bin/bash

apptitle="Brian's Auto-Rice Bootstaping Script (BARBS)"

aurhelper=yay

packages=(
    # xorg
    xorg-server # graphical server
    xorg-xinit # allows to manually start the xserver

    # bspwm
    bspwm
    sxhkdrc

    # git
    github-cli

    unclutter

    libnotify

    # audio
    pulseaudio
    pulseaudio-alsa
    pulseaudio-bluetooth
    pulsemixer
    pamixer
    alsa-utils # includes alsamixer
    pavucontrol

    # bluetooth
    bluez
    bluez-utils
    blueman # bluetooth gui

    dunst
    gnome-keyring
    acpid

    # network
    networkmanager
    nm-connection-editor
    network-manager-applet

    # lightdm
    lightdm
    lightdm-webkit2-greeter
    lightdm-webkit-theme-litarvan
    lightdm-webkit2-theme-glorious
    betterlockscreen

    # polybar
    polybar

    # themes
    papirus-icon-theme
    adpata-gtk-theme
    mcmojave-cursors=A
    lxappearance
    kvantum-qt5

    # fonts
    noto-fonts
    ttf-roboto
    nerd-fonts-fira-code=A

    # pacman
    pkgstats # send pacakge info to arch linux

    # terminal utilities
    trash-cli
    lf
    neofetch
    fzf
    fd # find, needed for fzf
    bat # cat, needed for fzf
    exa # ls
    ripgrep # better grep, needed for fzf
    broot
    bottom=A
    zoxide=A
    googler=A
    buku=A

    cronie # cron jobs

    # neovim
    neovim
    neovim-remote=A
    python-pynvim

    # other editor
    micro=A

    # clipboard stuff
    xclip # clipboard integration for neovim
    xsel # needed for cht.sh

    # dual keyboard mappings
    xcape

    # language package managers
    python-pip

    # shell stuff
    zsh
    tmux
    kitty
    # zsh prompt
    starship-bin=A

    # mount and unmount mangement
    udiskie

    # viewers
    feh # background setter
    sxiv # image
    zathura # pdf
    zathura-pdf-mupdf
    mpv # video

    # important for multimonitor
    autorandr
    arandr

    # gui stuff
    brave-bin=A
    nautilus
    flameshot
    peek # gifs
    gnome-sound-recorder # sound recording
    xfce4-power-manager # power management gui
    xob=A
    dragon-drag-and-drop=A
    syncthing
    syncthing-gtk

    # rofi stuff
    rofi
    buku_run=A

    # haskell
    ghc
    stack

    # rust
    rustup
    stable=RT
    beta=RT
    nightly=RT

    # cargo subcommands
    cargo-watch
    cargo-edit
    cargo-audit
    cargo-outdated
    cross=A # cross compile packages
    cargo-aur-bin=A

    # langague servers
    lua-language-server-git=A
    microsoft-python-language-server=A
    typescript-language-server-bin=A
    vscode-json-languageserver-bin=A
    yaml-language-server-bin=A
    gopls=A
    haskell-language-server-bin=A
    texlab
    rust-analyzer
    bash-language-server
)
total=${#packages[@]}

services=(
    networkmanager
    bluetooth
    lightdm
    "betterlockscreen@$name"
)

installpkg() {
    pacman --noconfirm --needed -S "$1" > /dev/null 2>&1
}

getuserandpass() {
    # Prompts user for new username an password.
    name=$(whiptail --inputbox "First, please enter a name for the user account." 10 60 3>&1 1>&2 2>&3 3>&1) || exit
    while ! echo "$name" | grep -q "^[a-z_][a-z0-9_-]*$"; do
        name=$(whiptail --no-cancel --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
    done
    pass1=$(whiptail --nocancel --passwordbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
    pass2=$(whiptail --nocancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
    while ! [ "$pass1" = "$pass2" ]; do
        unset pass2
        pass1=$(whiptail --nocancel --passwordbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
        pass2=$(whiptail --nocancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
    done
}

usercheck() { \
    ! (id -u "$name" >/dev/null) 2>&1 ||
    whiptail \
        --backtitle "$apptitle" \
        --title "WARNING!" \
        --yes-button "CONTINUE" \
        --no-button "No wait..." \
        --yesno "The user \`$name\` already exists on this system.
LARBS can install for a user already existing, but it will overwrite any conflicting settings/dotfiles on the user account.
LARBS will not overwrite your user files, documents, videos, etc., so don't worry about that, but only click <CONTINUE> if you don't mind your settings being overwritten.
Note also that LARBS will change $name's password to the one you just gave." 14 70
}

adduserandpass() {
    # Adds user `$name` with password $pass1.
    whiptail --infobox "Adding user \"$name\"..." 4 50
    useradd -m -g wheel -s /bin/zsh "$name" >/dev/null 2>&1 ||
    usermod -a -G wheel "$name" && mkdir -p /home/"$name" && chown "$name":wheel /home/"$name"
    # repodir="/home/$name/.local/src"; mkdir -p "$repodir"; chown -R "$name":wheel "$(dirname "$repodir")"
    # echo "$name:$pass1" | chpasswd
    # unset pass1 pass2
}

enableservice() {
    echo "Enabling the $1 service"
    systemctl enable "$1"
}

welcomemsg() {
    whiptail \
        --backtitle "$apptitle" \
        --title "Welcome!" \
        --msgbox "Welcome to Brian's Auto-Rice Bootstrapping Script!
This script will automatically install a fully-featured Linux desktop.
-Brian"
}

preinstallmsg() {
    whiptail --backtitle "$apptitle" \
        --title "Confirm" \
        --yes-button "Proceed to install" \
        --no-button "Quit" \
        --yesno "The rest of the installation will now be totally automated, so you can sit back and relax.
It will take some time, but when done, you can relax even more with your complete system.
Now just press <Proceed to install> and the system will begin installation!" 13 60 || { clear; exit; }
}

error() { clear; printf "Error:\\n%s\\n" "$1"; exit; }

whipmsg() {
    whiptail --backtitle "$apptitle" \
        --title "Installing" \
        --infobox "$1"
}

installmsg() {
    whipmsg "$1"
}

manualinstall() { # Installs $1 manually if not installed. Used only for AUR helper here.
    [ -f "/usr/bin/$1" ] || (
    whipmsg "Installing $1, and AUR helper..."
    cd /tmp || error "Failed to change to temp directory"
    rm -rf /tmp/"$1"*
    curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$1".tar.gz &&
    sudo -u "$name" tar -xvf "$1".tar.gz >/dev/null 2>&1 &&
    cd "$1" &&
    sudo -u "$name" makepkg --noconfirm -si >/dev/null 2>&1
    cd /tmp || return)
}

aurinstall() {
    installmsg "$1"
    echo "$aurinstalled" | grep -q "^$1$" && return
    sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1
}

rustinstall() {
    command -v rustup || installpkg rustup >/dev/null 2>&1
    installmsg "$1"
    rustup toolchain install "$1"
}

pipinstall() { \
    command -v pip || installpkg python-pip >/dev/null 2>&1
    installmsg "$1"
    yes | pip install "$1"
}

installneeded() {
    for package in curl base-devel git zsh; do
        echo "Installing $package which is required for this script to work"
        installpkg "$package" || return 1
    done
}

maininstall() {
    installmsg "$1"
    installpkg "$1"
}

installationloop() {
    aurinstalled=$(pacman -Qqm)
    local regex="([^=]+)(=([^=]+))?"
    for package in "${!packages[@]}"; do
        n=$((n+1))
        if [[ $package =~ $regex ]]; then
            local program=${BASH_REMATCH[1]}
            local type=${BASH_REMATCH[3]}

            case "$type" in
                "A") aurinstall "$program";;
                "P") pipinstall "$program";;
                "RT") rustinstall "$program";;
                *) installpkg "$program";;
            esac
        else
            error "the package doesn't match"
        fi
    done
}

serviceloop() {
    for service in "${!services[@]}"; do
        enableservice "$service"
    done
}

setshell() {
    chsh -s /bin/zsh "$name" >/dev/null 2>&1
}

finalize() {
    whiptail --title "Finished!" \
        --msgbox "The installation has finished"
}

main() {
    installpkg libnewt || error "Are you sure you're running this as the root user, are on an Arch-based distribution and have an internet connection?"

    welcomemsg || error "User exited."

    getuserandpass || error "User exited."

    usercheck || error "User exited."

    preinstallmsg || error "User exited."

    adduserandpass || error "Error adding username and/or password."

    installneeded || error "Failed to install needed packages for this script to work"

    manualinstall $aurhelper || error "Failed to install AUR helper."

    installationloop

    finalize

    clear
}

main
# sudo pacman -R gnu-free-fonts
