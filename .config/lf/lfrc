# =======================================================================
# ================================ options ==============================
# =======================================================================
set previewer /home/brian/.config/lf/lf_scope.sh

# dynamically set number of columns
cmd recol %{{
    w=$(tput cols)
    if [ $w -le 60 ]; then
        lf -remote "send $id set ratios 1:2"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}
recol

# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh
set shellopts '-eu:--shwordsplit'
set ifs "\n"

set scrolloff 10
set incsearch
set color256
set icons
set hidden!

# =======================================================================
# ================================ commands =============================
# =======================================================================

# asynchronous paste
cmd paste &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp -rn $list .
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
cmd trash %trash-put $fx

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd mkdir %mkdir -p "$@"; 
cmd touch %touch "$@";
# copy and rename at the same time
cmd go_put %cp "$f" "$@";

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd fzf_jump ${{
   FZF_DEFAULT_COMMAND="$FZF_ALT_C_COMMAND" 
   FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS"

   res="$(fzf)"
   cmd="cd"                                                       
   lf -remote "send $id $cmd \"$res\""
}}

cmd fzf ${{
   FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND"
   FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS"

   res="$(fzf)"

   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi

   lf -remote "send $id $cmd \"$res\""
}}

cmd Link %{{
	lf -remote 'load' | while read file; do
		if [ ! -n "${mode+1}" ]; then
			mode="$file"
			continue
		fi
		files+=("$file")
	done
	if [ "${#files[@]}" -le 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 0
	fi
	# symbolicly copy mode is indicating a soft link
	if [[ "$mode" == copy ]]; then
		ln -sr $files -t .
	# while a move mode is indicating a hard link
	elif [[ "$mode" == move ]]; then
		ln $files -t .
	fi
}}

cmd rifle ${{
    set -f
    rifle -l $f
    read -p "Select runner: " runner
    rifle -p $runner $f
}}

cmd video_preview ${{
    CACHE=$(mktemp /tmp/thumb_cache.XXXXX)
    ffmpegthumbnailer -i "$f" -o $CACHE -s 0
    $HOME/.config/lf/draw_img.sh $CACHE && rm $CACHE
}}

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
	src=$(printf $names | cut -f1)
	dst=$(printf $names | cut -f2)
	[ $src = $dst ] && continue
	[ -e $dst ] && continue
	mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

# new folder with selected items
cmd newfold ${{
    set -f
    read newd
    mkdir $newd
    mv $fx $newd
}}

cmd yank-dirname ${{
    dirname -- "$f" | tr -d '\n' | xclip -i -selection clipboard
}}

cmd yank-path ${{
    echo "$fx" | xclip -i -selection clipboard
}}

cmd yank-basename ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      xclip -i -selection clipboard
}}

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' | xclip -i -selection clipboard
}}

# =======================================================================
# ================================ mappings =============================
# =======================================================================

map <a-c> :fzf_jump
map <c-t> :fzf

map . set hidden!
map gh :cd ~

map a push :touch<space>
map A push :mkdir<space>

map D trash
map <delete> delete
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

map P :Link
map gp push :go_put<space>

map - $$HOME/.config/lf/draw_img.sh $f
map + :video_preview

map R :bulk-rename

map <a-n> newfold
